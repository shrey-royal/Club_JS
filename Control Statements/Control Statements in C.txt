Control Statements in C

Control statements in C are used to control the flow of execution in a program. They determine the sequence in which the instructions are executed based on certain conditions or criteria. There are three main types of control statements in C: selection statements, iteration statements, and jump statements.

1. Selection Statements:
Selection statements are used to select one or more statements for execution based on the value of an expression. There are two types of selection statements in C: if-else and switch.

a. if-else statement:
1. if statement:
Syntax:
if (condition) {
    // Statements to execute if the condition is true
}

Example:
#include <stdio.h>

void main() {
    int num = 10;
    
    if (num > 0) {
        printf("Number is positive\n");
    }
    
    return 0;
}

2. if else statement:
Syntax:
if (condition) {
    // Statements to execute if the condition is true
} else {
    // Statements to execute if the condition is false
}

Example:
#include <stdio.h>

void main() {
    int num = 10;
    
    if (num > 0) {
        printf("Number is positive\n");
    } else {
        printf("Number is not positive\n");
    }
    
    return 0;
}

3. if else if statement (ladder else if):
Syntax:
if (condition1) {
    // Statements to execute if condition1 is true
} else if (condition2) {
    // Statements to execute if condition2 is true
} else if (condition3) {
    // Statements to execute if condition3 is true
} else {
    // Statements to execute if none of the conditions are true
}

Example:
#include <stdio.h>

void main() {
    int num = 0;
    
    if (num > 0) {
        printf("Number is positive\n");
    } else if (num < 0) {
        printf("Number is negative\n");
    } else {
        printf("Number is zero\n");
    }
    
    return 0;
}

4. nested if else statement:
Syntax:
if (condition1) {
    if (condition2) {
        // Statements to execute if both condition1 and condition2 are true
    } else {
        // Statements to execute if condition1 is true and condition2 is false
    }
} else {
    // Statements to execute if condition1 is false
}

Example:
#include <stdio.h>

void main() {
    int num = 10;
    
    if (num > 0) {
        if (num % 2 == 0) {
            printf("Number is positive and even\n");
        } else {
            printf("Number is positive and odd\n");
        }
    } else {
        printf("Number is not positive\n");
    }
    
    return 0;
}

b. switch statement:
Syntax:
switch (expression) {
    case constant1:
        // Statements to execute if expression equals constant1
        break;
    case constant2:
        // Statements to execute if expression equals constant2
        break;
    .
    .
    .
    default:
        // Statements to execute if expression doesn't match any case
}

Example:
#include <stdio.h>

void main() {
    char grade = 'A';
    
    switch (grade) {
        case 'A':
            printf("Excellent!\n");
            break;
        case 'B':
            printf("Good!\n");
            break;
        case 'C':
            printf("Fair!\n");
            break;
        default:
            printf("Invalid grade!\n");
    }
    
    return 0;
}

2. Iteration Statements:
Iteration statements, also known as loop statements, are used to execute a block of code repeatedly as long as a condition is true. There are three main types of iteration statements in C: for loop, while loop, and do-while loop.

a. for loop:
Syntax:
for (initialization; condition; increment/decrement) {
    // Statements to execute repeatedly
}

Example:
#include <stdio.h>

void main() {
    int i;
    
    for (i = 1; i <= 5; i++) {
        printf("%d ", i);
    }
    
    return 0;
}

b. while loop:
Syntax:
while (condition) {
    // Statements to execute repeatedly
}

Example:
#include <stdio.h>

void main() {
    int i = 1;
    
    while (i <= 5) {
        printf("%d ", i);
        i++;
    }
    
    return 0;
}

c. do-while loop:
Syntax:
do {
    // Statements to execute repeatedly
} while (condition);

Example:
#include <stdio.h>

void main() {
    int i = 1;
    
    do {
        printf("%d ", i);
        i++;
    } while (i <= 5);
    
    return 0;
}

3. Jump Statements:
Jump statements are used to transfer control unconditionally within a program. There are three types of jump statements in C: break, continue, and goto. However, the use of goto is generally discouraged due to its potential to create unreadable and unmaintainable code.

a. break statement:
The break statement is used to terminate the loop or switch statement immediately when it is encountered.

Example:
#include <stdio.h>

void main() {
    int i;
    
    for (i = 1; i <= 10; i++) {
        if (i == 5) {
            break;
        }
        printf("%d ", i);
    }
    
    return 0;
}

b. continue statement:
The continue statement is used to skip the remaining code inside a loop for the current iteration and proceed with the next iteration.

Example:
#include <stdio.h>

void main() {
    int i;
    
    for (i = 1; i <= 5; i++) {
        if (i == 3) {
            continue;
        }
        printf("%d ", i);
    }
    
    return 0;
}

c. goto statement:
The goto statement is used to transfer control to a labeled statement within the same function.

Example:
#include <stdio.h>

void main() {
    int i = 1;
    
    loop:
    printf("%d ", i);
    i++;
    if (i <= 5)
        goto loop;
    
    return 0;
}

