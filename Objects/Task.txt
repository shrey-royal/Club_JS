--> Iteration 1 (All the inputs must be entered by our own dear user)

-> Make switch case and ask user to choose the operation

1. Student Information System:
    - Create an object to store a student's details including name, grade, and subjects.
    - Access and display the student's name and grade.
    - Update the student's grade.
    - Add a new property to store the student's email.
    - Remove the subject property.

2. Library Management:
    - Create an object to store information about a book, such as title, author, and publication year.
    - Access and print the book's title and author.
    - Update the publication year.
    - Add a new property to store the book's genre.
    - Remove the author property.

3. Employee Record:
    - Create an object to store an employee's details including first name, last name, and salary.
    - Access and display the employee's first name and salary.
    - Modify the employee's last name.
    - Add a new property to store the employee's department.
    - Remove the salary property.

4. Product Catalog:
    - Create an object to store a product's details such as name, price, and stock quantity.
    - Access and print the product's name and price.
    - Update the product's stock quantity.
    - Add a new property to store the product's category.
    - Remove the price property.

5. Vehicle Information:
    - Create an object to store information about a vehicle, including make, model, and year.
    - Access and display the vehicle's make and model.
    - Modify the vehicle's year.
    - Add a new property to store the vehicle's color.
    - Remove the model property.

6. Hotel Booking System:
    - Create an object to store booking details including guest name, room number, and check-in date.
    - Access and print the guest's name and room number.
    - Update the check-in date.
    - Add a new property to store the number of nights stayed.
    - Remove the room number property.

7. E-commerce Order:
    - Create an object to store an order's details such as order ID, product name, and quantity.
    - Access and display the order ID and product name.
    - Modify the quantity.
    - Add a new property to store the delivery date.
    - Remove the product name property.

8. University Course:
    - Create an object to store course details including course name, instructor, and credits.
    - Access and print the course name and instructor.
    - Update the number of credits.
    - Add a new property to store the course schedule.
    - Remove the instructor property.

9. Real Estate Listing:
    - Create an object to store a property's details such as address, price, and square footage.
    - Access and display the address and price.
    - Modify the price.
    - Add a new property to store the number of bedrooms.
    - Remove the square footage property.

10. Event Management:
    - Create an object to store event details including event name, date, and location.
    - Access and print the event name and date.
    - Update the location.
    - Add a new property to store the number of attendees.
    - Remove the date property.

-------------------------------------------------


Task 1: Managing a Shopping Cart
You have a shopping cart represented as an array of objects, where each object represents an item with properties for name, quantity, and price. Calculate the total cost of items in the cart.

var shoppingCart = [
    { name: "Milk", quantity: 2, price: 33 },
    { name: "Bread", quantity: 1, price: 40 },
    { name: "Dahi", quantity: 12, price: 23 }
];

Task 2: Analyzing Movie Ratings
You have an array of movie objects, each with properties for title and rating. Find the highest-rated movie.

var movies = [
    { title: "Movie 1", rating: 6.7 },
    { title: "Movie 2", rating: 8.5 },
    { title: "Movie 3", rating: 9.1 },
    { title: "Movie 4", rating: 7.3 }
];

Task 3: Organizing a To-Do List
You have a to-do list represented as an array of strings. Implement a function to add a new task, remove a completed task, and display the current list of tasks.

var toDoList = ["Buy groceries", "Clean the house", "Pay bills"];

Task 4: Processing Sales Data
You have an array of sales data where each element is an object with properties for the date and sales amount. Calculate the total sales for a given month.

var salesData = [
    { date: "2024-07-01", amount: 200 },
    { date: "2024-07-15", amount: 450 },
    { date: "2024-08-02", amount: 300 },
    { date: "2024-08-10", amount: 150 }
];

Task 5: Managing Employee Records
You have an array of employee objects, each with properties for name and position. Implement functions to promote an employee to a new position and list all employees.

var employees = [
    { name: "Alice", position: "Developer" },
    { name: "Bob", position: "Designer" },
    { name: "Charlie", position: "Manager" }
];

------------------------------------------------------------------------------------------

New Ones:

1. Inventory Management System:
   Create an inventory management system for a warehouse. Each item in the inventory should be represented by an object with properties such as "itemID", "name", "quantity", "price", and "supplierDetails". Implement methods to add new items, update item quantities, and calculate the total value of the inventory.

2. User Management for a Web Application:
   Design a user management module for a web application. Each user object should contain properties like "userID", "username", "email", "password", "roles", and "lastLogin". Implement functions to register new users, authenticate existing users, update user profiles, and manage user roles.

3. Library System:
   Build a library management system where each book is represented as an object with properties such as "ISBN", "title", "author", "genre", "availableCopies", and "borrowerHistory". Include methods to borrow and return books, check book availability, and track borrowing history.

4. E-commerce Order Processing:
   Develop an order processing system for an e-commerce platform. Each order should be an object containing properties like "orderID", "customerID", "orderDate", "items" (an array of item objects), "shippingAddress", and "status". Implement functions to place orders, update order status, and calculate the total order cost.

5. School Management System:
   Create a school management system where each student is represented by an object with properties such as "studentID", "name", "grade", "subjects", and "attendance". Implement methods to enroll students, record attendance, assign grades, and generate student report cards.

6. Movie Database:
   Build a movie database where each movie is an object with properties like "movieID", "title", "director", "cast" (an array of actor objects), "genre", "releaseYear", and "ratings" (an array of rating objects). Include functions to add new movies, update movie details, and calculate average ratings.

7. Healthcare Patient Records:
   Design a healthcare management system where each patient is represented by an object with properties such as "patientID", "name", "dateOfBirth", "medicalHistory", "currentMedications", and "appointments" (an array of appointment objects). Implement functions to add new patients, schedule appointments, and update medical records.

8. Restaurant Menu Management:
   Create a menu management system for a restaurant. Each menu item should be an object with properties like "itemID", "name", "description", "price", "ingredients", and "category". Implement methods to add new menu items, update item details, and categorize items by type (e.g., appetizers, main courses, desserts).

9. Real Estate Property Management:
   Develop a property management system for a real estate agency. Each property should be an object with properties such as "propertyID", "address", "ownerDetails", "type" (e.g., residential, commercial), "price", "status", and "rentalHistory". Implement functions to list properties, update property details, and manage rental agreements.

10. Travel Booking System:
    Build a travel booking system where each booking is represented by an object with properties like "bookingID", "customerID", "tripDetails" (an object with properties like "destination", "startDate", "endDate"), "accommodationDetails", and "paymentStatus". Include methods to create new bookings, update booking details, and calculate trip costs.

11. Employee Management System:
    Create an employee management system for a company. Each employee should be an object with properties such as "employeeID", "name", "position", "department", "salary", and "performanceReviews". Implement functions to add new employees, update employee details, manage salaries, and conduct performance reviews.

12. Bank Account Management:
    Develop a bank account management system where each account is an object with properties like "accountNumber", "accountHolder", "balance", "transactionHistory" (an array of transaction objects), and "accountType". Implement methods to create new accounts, process transactions (deposits and withdrawals), and generate account statements.

13. Event Management System:
    Build an event management system where each event is represented by an object with properties such as "eventID", "name", "date", "location", "participants" (an array of participant objects), and "organizerDetails". Include functions to create new events, register participants, and manage event schedules.

14. Online Course Management:
    Create an online course management system where each course is an object with properties like "courseID", "title", "instructor", "syllabus", "enrolledStudents" (an array of student objects), and "courseMaterials". Implement methods to add new courses, enroll students, and manage course content.

15. Customer Support Ticketing System:
    Develop a customer support ticketing system where each support ticket is an object with properties like "ticketID", "customerID", "issueDescription", "status", "assignedSupportAgent", and "resolutionDetails". Implement functions to create new tickets, update ticket status, assign support agents, and track resolutions.